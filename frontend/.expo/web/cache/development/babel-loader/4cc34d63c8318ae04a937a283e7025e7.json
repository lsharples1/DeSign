{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SelectDropdown from 'react-native-select-dropdown';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AuthContext = React.createContext();\n\nfunction SplashScreen() {\n  return _jsx(View, {\n    children: _jsx(Text, {\n      children: \"Loading...\"\n    })\n  });\n}\n\nvar ChoosePlatform = function ChoosePlatform() {\n  var platformOptions = ['Pharmacy', 'Student Judiciary', 'Banking'];\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      platformValue = _useState2[0],\n      setPlatformValue = _useState2[1];\n\n  var handleSelect = function handleSelect(e) {\n    console.log(e);\n    setPlatformValue(e);\n  };\n\n  return _jsx(SelectDropdown, {\n    data: platformOptions,\n    onSelect: handleSelect,\n    defaultButtonText: \"Select Platform\",\n    buttonTextAfterSelection: function buttonTextAfterSelection(selectedItem, index) {\n      return selectedItem;\n    },\n    rowTextForSelection: function rowTextForSelection(item, index) {\n      return item;\n    },\n    buttonStyle: styles.dropdownBtnStyle,\n    buttonTextStyle: styles.dropdownBtnTxtStyle,\n    renderDropdownIcon: function renderDropdownIcon(isOpened) {\n      return _jsx(FontAwesome, {\n        name: isOpened ? \"chevron-up\" : \"chevron-down\",\n        color: \"#444\",\n        size: 18\n      });\n    },\n    dropdownIconPosition: \"right\",\n    dropdownStyle: styles.dropdownStyle,\n    rowStyle: styles.dropdownRowStyle,\n    rowTextStyle: styles.dropdownRowTxtStyle\n  });\n};\n\nfunction HomeScreen() {\n  var _React$useContext = React.useContext(AuthContext),\n      signOut = _React$useContext.signOut;\n\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Signed in!\"\n    }), _jsx(Button, {\n      title: \"Sign out\",\n      onPress: signOut\n    })]\n  });\n}\n\nfunction SignInScreen() {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      username = _React$useState2[0],\n      setUsername = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  var _React$useContext2 = React.useContext(AuthContext),\n      signIn = _React$useContext2.signIn;\n\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"   Username\",\n      value: username,\n      onChangeText: setUsername\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"   Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true\n    }), _jsx(ChoosePlatform, {}), _jsx(Button, {\n      title: \"Sign in\",\n      onPress: function onPress() {\n        return signIn({\n          username: username,\n          password: password\n        });\n      }\n    })]\n  });\n}\n\nvar Stack = createStackNavigator();\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {} catch (e) {}\n\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: _jsx(NavigationContainer, {\n      children: _jsx(Stack.Navigator, {\n        children: state.isLoading ? _jsx(Stack.Screen, {\n          name: \"Splash\",\n          component: SplashScreen\n        }) : state.userToken == null ? _jsx(Stack.Screen, {\n          name: \"SignIn\",\n          component: SignInScreen,\n          options: {\n            title: 'Sign in',\n            animationTypeForReplace: state.isSignout ? 'pop' : 'push'\n          }\n        }) : _jsx(Stack.Screen, {\n          name: \"Home\",\n          component: platformValue\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  dropdownBtnStyle: {\n    width: \"80%\",\n    height: 50,\n    backgroundColor: \"#FFF\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#444\",\n    alignSelf: 'center',\n    marginBottom: 20\n  },\n  dropdownBtnTxtStyle: {\n    color: \"#444\",\n    textAlign: \"left\"\n  },\n  dropdownStyle: {\n    backgroundColor: \"#EFEFEF\"\n  },\n  dropdownRowStyle: {\n    backgroundColor: \"#EFEFEF\",\n    borderBottomColor: \"#C5C5C5\"\n  },\n  dropdownRowTxtStyle: {\n    color: \"#444\",\n    textAlign: \"left\"\n  },\n  input: {\n    margin: 15,\n    height: 40,\n    borderColor: 'black',\n    borderWidth: 1\n  }\n});","map":{"version":3,"sources":["/Users/lillysharples/11Dev/projects/hackathon/frontend/src/screens/landing/index.js"],"names":["React","useState","NavigationContainer","createStackNavigator","SelectDropdown","FontAwesome","AuthContext","createContext","SplashScreen","ChoosePlatform","platformOptions","platformValue","setPlatformValue","handleSelect","e","console","log","selectedItem","index","item","styles","dropdownBtnStyle","dropdownBtnTxtStyle","isOpened","dropdownStyle","dropdownRowStyle","dropdownRowTxtStyle","HomeScreen","useContext","signOut","SignInScreen","username","setUsername","password","setPassword","signIn","input","Stack","App","navigation","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","useEffect","bootstrapAsync","authContext","useMemo","data","signUp","title","animationTypeForReplace","StyleSheet","create","width","height","backgroundColor","borderRadius","borderWidth","borderColor","alignSelf","marginBottom","color","textAlign","borderBottomColor","margin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Text, TextInput, View, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SelectDropdown from 'react-native-select-dropdown';\nimport FontAwesome from \"react-native-vector-icons/FontAwesome\";\n\n\nconst AuthContext = React.createContext();\n\n\nfunction SplashScreen() {\n  return (\n    <View>\n      <Text>Loading...</Text>\n    </View>\n  );\n}\nconst ChoosePlatform = () => {\n  const platformOptions = ['Pharmacy', 'Student Judiciary', 'Banking'];\n  const [platformValue, setPlatformValue]=useState('');\n   const handleSelect=(e)=>{\n    console.log(e);\n    setPlatformValue(e)\n  }\n  return (\n        <SelectDropdown\n            data={platformOptions}\n            onSelect={handleSelect}\n            defaultButtonText={\"Select Platform\"}\n            buttonTextAfterSelection={(selectedItem, index) => {\n              return selectedItem;\n            }}\n            rowTextForSelection={(item, index) => {\n              return item;\n            }}\n            buttonStyle={styles.dropdownBtnStyle}\n            buttonTextStyle={styles.dropdownBtnTxtStyle}\n            renderDropdownIcon={(isOpened) => {\n              return (\n                <FontAwesome\n                  name={isOpened ? \"chevron-up\" : \"chevron-down\"}\n                  color={\"#444\"}\n                  size={18}\n                />\n              );\n            }}\n            dropdownIconPosition={\"right\"}\n            dropdownStyle={styles.dropdownStyle}\n            rowStyle={styles.dropdownRowStyle}\n            rowTextStyle={styles.dropdownRowTxtStyle}\n          />\n  );\n};\n\nfunction HomeScreen() {\n  const { signOut } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <Text>Signed in!</Text>\n      <Button title=\"Sign out\" onPress={signOut} />\n    </View>\n  );\n}\n\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n      style={styles.input}\n        placeholder=\"   Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n      style={styles.input}\n        placeholder=\"   Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <ChoosePlatform/>\n      <Button title=\"Sign in\" onPress={() => signIn({ username, password })} />\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nexport default function App({ navigation }) {\n  \n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        // Restore token stored in `SecureStore` or any other encrypted storage\n        // userToken = await SecureStore.getItemAsync('userToken');\n      } catch (e) {\n        // Restoring token failed\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore` or any other encrypted storage\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer>\n        <Stack.Navigator>\n          {state.isLoading ? (\n            // We haven't finished checking for the token yet\n            <Stack.Screen name=\"Splash\" component={SplashScreen} />\n          ) : state.userToken == null ? (\n            // No token found, user isn't signed in\n            <Stack.Screen\n              name=\"SignIn\"\n              component={SignInScreen}\n              options={{\n                title: 'Sign in',\n                // When logging out, a pop animation feels intuitive\n                animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n              }}\n            />\n          ) : (\n            // User is signed in\n            <Stack.Screen name=\"Home\" component={platformValue} />\n          )}\n        </Stack.Navigator>\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  dropdownBtnStyle: {\n    width: \"80%\",\n    height: 50,\n    backgroundColor: \"#FFF\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#444\",\n    alignSelf: 'center',\n    marginBottom: 20\n  },\n  dropdownBtnTxtStyle: { color: \"#444\", textAlign: \"left\" },\n  dropdownStyle: { backgroundColor: \"#EFEFEF\" },\n  dropdownRowStyle: {\n    backgroundColor: \"#EFEFEF\",\n    borderBottomColor: \"#C5C5C5\",\n  },\n  dropdownRowTxtStyle: { color: \"#444\", textAlign: \"left\" },\n   input: {\n      margin: 15,\n      height: 40,\n      borderColor: 'black',\n      borderWidth: 1\n   },\n});\n"]},"metadata":{},"sourceType":"module"}