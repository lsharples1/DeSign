{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport _ from \"lodash\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar DROPDOWN_MAX_HEIGHT = height * 0.4;\n\nvar SelectDropdown = function SelectDropdown(_ref, ref) {\n  var data = _ref.data,\n      onSelect = _ref.onSelect,\n      defaultButtonText = _ref.defaultButtonText,\n      buttonTextAfterSelection = _ref.buttonTextAfterSelection,\n      rowTextForSelection = _ref.rowTextForSelection,\n      defaultValue = _ref.defaultValue,\n      defaultValueByIndex = _ref.defaultValueByIndex,\n      disabled = _ref.disabled,\n      disableAutoScroll = _ref.disableAutoScroll,\n      buttonStyle = _ref.buttonStyle,\n      buttonTextStyle = _ref.buttonTextStyle,\n      renderCustomizedButtonChild = _ref.renderCustomizedButtonChild,\n      renderDropdownIcon = _ref.renderDropdownIcon,\n      dropdownIconPosition = _ref.dropdownIconPosition,\n      statusBarTranslucent = _ref.statusBarTranslucent,\n      dropdownStyle = _ref.dropdownStyle,\n      dropdownOverlayColor = _ref.dropdownOverlayColor,\n      dropdownBackgroundColor = _ref.dropdownBackgroundColor,\n      rowStyle = _ref.rowStyle,\n      rowTextStyle = _ref.rowTextStyle,\n      renderCustomizedRowChild = _ref.renderCustomizedRowChild;\n  useImperativeHandle(ref, function () {\n    return {\n      reset: function reset() {\n        _reset();\n      },\n      openDropdown: function openDropdown() {\n        _openDropdown();\n      },\n      closeDropdown: function closeDropdown() {\n        _closeDropdown();\n      }\n    };\n  });\n\n  var calculateDropdownHeight = function calculateDropdownHeight() {\n    if (dropdownStyle && dropdownStyle.height) {\n      return dropdownStyle.height;\n    } else {\n      if (!data || data.length == 0) {\n        return 150;\n      } else {\n        if (rowStyle && rowStyle.height) {\n          var _height = rowStyle.height * data.length;\n\n          return _height < DROPDOWN_MAX_HEIGHT ? _height : DROPDOWN_MAX_HEIGHT;\n        } else {\n          var _height2 = 50 * data.length;\n\n          return _height2 < DROPDOWN_MAX_HEIGHT ? _height2 : DROPDOWN_MAX_HEIGHT;\n        }\n      }\n    }\n  };\n\n  var DropdownButton = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dropdownPX = _useState4[0],\n      setDropdownPX = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dropdownPY = _useState6[0],\n      setDropdownPY = _useState6[1];\n\n  var _useState7 = useState(function () {\n    return calculateDropdownHeight();\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropdownHEIGHT = _useState8[0],\n      setDropdownHEIGHT = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropdownWIDTH = _useState10[0],\n      setDropdownWIDTH = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedItem = _useState12[0],\n      setSelectedItem = _useState12[1];\n\n  var _useState13 = useState(-1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      index = _useState14[0],\n      setIndex = _useState14[1];\n\n  var dropDownFlatlistRef = useRef(null);\n  var styles = StyleSheet.create({\n    dropdownButton: {\n      flexDirection: dropdownIconPosition == \"left\" ? \"row\" : \"row-reverse\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      backgroundColor: \"#EFEFEF\",\n      width: width / 2,\n      height: 50,\n      paddingHorizontal: 8,\n      overflow: \"hidden\"\n    },\n    dropdownButtonText: {\n      flex: 1,\n      fontSize: 18,\n      color: \"#000000\",\n      textAlign: \"center\",\n      marginHorizontal: 8\n    },\n    dropdownCustomizedButtonParent: {\n      flex: 1,\n      overflow: \"hidden\"\n    },\n    dropdownOverlay: {\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"rgba(0,0,0,0.4)\"\n    },\n    dropdownOverlayView: {\n      backgroundColor: \"#EFEFEF\"\n    },\n    dropdownOverlayViewForce: {\n      position: \"absolute\",\n      top: dropdownPY,\n      height: dropdownHEIGHT,\n      width: dropdownWIDTH,\n      borderTopWidth: 0,\n      overflow: \"hidden\"\n    },\n    dropdownOverlayViewForceRTL: I18nManager.isRTL ? {\n      right: dropdownPX\n    } : {\n      left: dropdownPX\n    },\n    dropdownActivityIndicatorView: {\n      width: \"100%\",\n      height: \"100%\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    dropdownRow: {\n      flex: 1,\n      height: 50,\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      borderBottomColor: \"#C5C5C5\",\n      borderBottomWidth: 1\n    },\n    dropdownRowText: {\n      flex: 1,\n      fontSize: 18,\n      color: \"#000000\",\n      textAlign: \"center\",\n      marginHorizontal: 8\n    },\n    dropdownCustomizedRowParent: {\n      flex: 1,\n      overflow: \"hidden\"\n    },\n    shadow: {\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 6\n      },\n      shadowOpacity: 0.1,\n      shadowRadius: 10,\n      elevation: 10\n    }\n  });\n  useEffect(function () {\n    if (data.length == 0) {\n      _reset();\n\n      if (defaultValueByIndex && data && data[defaultValueByIndex]) {\n        setDefault(defaultValueByIndex);\n      }\n\n      if (defaultValue && data && findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [data]);\n  useEffect(function () {\n    if (defaultValueByIndex != null && defaultValueByIndex != undefined && data && data[defaultValueByIndex]) {\n      setDefault(defaultValueByIndex);\n    }\n  }, [defaultValueByIndex]);\n  useEffect(function () {\n    if (defaultValue && data) {\n      if (findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [defaultValue]);\n  useEffect(function () {\n    setDropdownHEIGHT(calculateDropdownHeight());\n  }, [dropdownStyle, data]);\n\n  var _openDropdown = function _openDropdown() {\n    DropdownButton.current.measure(function (fx, fy, w, h, px, py) {\n      if (height - 18 < py + h + dropdownHEIGHT) {\n        setDropdownPX(px);\n        setDropdownPY(py - 2 - dropdownHEIGHT);\n      } else {\n        setDropdownPX(px);\n        setDropdownPY(py + h + 2);\n      }\n\n      setDropdownWIDTH((dropdownStyle == null ? void 0 : dropdownStyle.width) || w);\n      setIsVisible(true);\n    });\n  };\n\n  var _closeDropdown = function _closeDropdown() {\n    setIsVisible(false);\n  };\n\n  var _reset = function _reset() {\n    setSelectedItem(null);\n    setIndex(-1);\n  };\n\n  var setDefault = function setDefault(index) {\n    setSelectedItem(data[index]);\n    setIndex(index);\n  };\n\n  var findIndexInArr = function findIndexInArr(obj, arr) {\n    if (typeof obj == \"object\") {\n      var defaultValueIndex = -1;\n\n      for (var _index = 0; _index < arr.length; _index++) {\n        var element = arr[_index];\n\n        if (_.isEqual(element, defaultValue)) {\n          defaultValueIndex = _index;\n        }\n\n        if (_index == arr.length - 1) {\n          if (defaultValueIndex >= 0) {\n            setDefault(defaultValueIndex);\n          }\n        }\n      }\n    } else {\n      var defaultValueIndex = -1;\n\n      for (var _index2 = 0; _index2 < arr.length; _index2++) {\n        var _element = arr[_index2];\n\n        if (_element == defaultValue) {\n          defaultValueIndex = _index2;\n        }\n\n        if (_index2 == arr.length - 1) {\n          if (defaultValueIndex >= 0) {\n            setDefault(defaultValueIndex);\n          }\n        }\n      }\n    }\n  };\n\n  var getItemLayout = function getItemLayout(data, index) {\n    return {\n      index: index,\n      length: data.length,\n      offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index\n    };\n  };\n\n  var onLayout = function onLayout() {\n    if (disableAutoScroll) {\n      return;\n    }\n\n    if (index >= 3 && dropDownFlatlistRef) {\n      dropDownFlatlistRef.current.scrollToOffset({\n        offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n        animated: true\n      });\n    }\n  };\n\n  var renderFlatlistItem = function renderFlatlistItem(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return _jsx(TouchableOpacity, {\n      style: [styles.dropdownRow, rowStyle],\n      onPress: function onPress() {\n        _closeDropdown();\n\n        onSelect(item, index);\n        setSelectedItem(item);\n        setIndex(index);\n      },\n      children: renderCustomizedRowChild ? _jsx(View, {\n        style: [styles.dropdownCustomizedRowParent],\n        children: renderCustomizedRowChild(rowTextForSelection ? rowTextForSelection(item, index) : item, index)\n      }) : _jsx(Text, {\n        numberOfLines: 1,\n        allowFontScaling: false,\n        style: [styles.dropdownRowText, rowTextStyle],\n        children: rowTextForSelection ? rowTextForSelection(item, index) : item\n      })\n    });\n  };\n\n  var renderDropdown = function renderDropdown() {\n    return isVisible && _jsxs(Modal, {\n      supportedOrientations: [\"portrait\", \"landscape\"],\n      animationType: \"none\",\n      transparent: true,\n      statusBarTranslucent: statusBarTranslucent ? statusBarTranslucent : false,\n      visible: isVisible,\n      children: [_jsx(TouchableOpacity, {\n        activeOpacity: 1,\n        style: [styles.dropdownOverlay, !!dropdownOverlayColor && {\n          backgroundColor: dropdownOverlayColor\n        }],\n        onPress: function onPress() {\n          return _closeDropdown();\n        }\n      }), _jsx(View, {\n        style: [styles.dropdownOverlayView, styles.shadow, dropdownStyle, styles.dropdownOverlayViewForce, styles.dropdownOverlayViewForceRTL],\n        children: !data || data.length == 0 ? _jsx(View, {\n          style: [styles.dropdownActivityIndicatorView],\n          children: _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: \"#999999\"\n          })\n        }) : _jsx(FlatList, {\n          data: data,\n          style: [!!dropdownBackgroundColor && {\n            backgroundColor: dropdownBackgroundColor\n          }],\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          },\n          ref: function ref(_ref3) {\n            return dropDownFlatlistRef.current = _ref3;\n          },\n          renderItem: renderFlatlistItem,\n          getItemLayout: getItemLayout,\n          onLayout: onLayout\n        })\n      })]\n    });\n  };\n\n  return _jsxs(TouchableOpacity, {\n    disabled: disabled,\n    ref: DropdownButton,\n    activeOpacity: 0.5,\n    style: [styles.dropdownButton, buttonStyle],\n    onPress: function onPress() {\n      return _openDropdown();\n    },\n    children: [renderDropdown(), renderDropdownIcon && renderDropdownIcon(isVisible), renderCustomizedButtonChild ? _jsx(View, {\n      style: [styles.dropdownCustomizedButtonParent],\n      children: renderCustomizedButtonChild(selectedItem, index)\n    }) : _jsx(Text, {\n      numberOfLines: 1,\n      allowFontScaling: false,\n      style: [styles.dropdownButtonText, buttonTextStyle],\n      children: selectedItem ? buttonTextAfterSelection ? buttonTextAfterSelection(selectedItem, index) : selectedItem : defaultButtonText ? defaultButtonText : \"Select an option.\"\n    })]\n  });\n};\n\nexport default forwardRef(function (props, ref) {\n  return SelectDropdown(props, ref);\n});","map":{"version":3,"sources":["/Users/lillysharples/11Dev/projects/hackathon/frontend/node_modules/react-native-select-dropdown/src/SelectDropdown.js"],"names":["React","useEffect","useState","useRef","forwardRef","useImperativeHandle","_","Dimensions","get","width","height","DROPDOWN_MAX_HEIGHT","SelectDropdown","ref","data","onSelect","defaultButtonText","buttonTextAfterSelection","rowTextForSelection","defaultValue","defaultValueByIndex","disabled","disableAutoScroll","buttonStyle","buttonTextStyle","renderCustomizedButtonChild","renderDropdownIcon","dropdownIconPosition","statusBarTranslucent","dropdownStyle","dropdownOverlayColor","dropdownBackgroundColor","rowStyle","rowTextStyle","renderCustomizedRowChild","reset","openDropdown","closeDropdown","calculateDropdownHeight","length","DropdownButton","isVisible","setIsVisible","dropdownPX","setDropdownPX","dropdownPY","setDropdownPY","dropdownHEIGHT","setDropdownHEIGHT","dropdownWIDTH","setDropdownWIDTH","selectedItem","setSelectedItem","index","setIndex","dropDownFlatlistRef","styles","StyleSheet","create","dropdownButton","flexDirection","justifyContent","alignItems","backgroundColor","paddingHorizontal","overflow","dropdownButtonText","flex","fontSize","color","textAlign","marginHorizontal","dropdownCustomizedButtonParent","dropdownOverlay","dropdownOverlayView","dropdownOverlayViewForce","position","top","borderTopWidth","dropdownOverlayViewForceRTL","I18nManager","isRTL","right","left","dropdownActivityIndicatorView","dropdownRow","borderBottomColor","borderBottomWidth","dropdownRowText","dropdownCustomizedRowParent","shadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","setDefault","findIndexInArr","undefined","current","measure","fx","fy","w","h","px","py","obj","arr","defaultValueIndex","element","isEqual","getItemLayout","offset","onLayout","scrollToOffset","animated","renderFlatlistItem","item","renderDropdown","toString","props"],"mappings":";AAAA,OAAOA,KAAP,IACEC,SADF,EAEEC,QAFF,EAGEC,MAHF,EAIEC,UAJF,EAKEC,mBALF,QAMO,OANP;;;;;;;;;;AAkBA,OAAOC,CAAP,MAAc,QAAd;;;;AACA,sBAA0BC,UAAU,CAACC,GAAX,CAAe,QAAf,CAA1B;AAAA,IAAQC,KAAR,mBAAQA,KAAR;AAAA,IAAeC,MAAf,mBAAeA,MAAf;;AAEA,IAAMC,mBAAmB,GAAGD,MAAM,GAAG,GAArC;;AAEA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,OA2BrBC,GA3BqB,EA4BlB;AAAA,MA1BDC,IA0BC,QA1BDA,IA0BC;AAAA,MAzBDC,QAyBC,QAzBDA,QAyBC;AAAA,MAxBDC,iBAwBC,QAxBDA,iBAwBC;AAAA,MAvBDC,wBAuBC,QAvBDA,wBAuBC;AAAA,MAtBDC,mBAsBC,QAtBDA,mBAsBC;AAAA,MArBDC,YAqBC,QArBDA,YAqBC;AAAA,MApBDC,mBAoBC,QApBDA,mBAoBC;AAAA,MAnBDC,QAmBC,QAnBDA,QAmBC;AAAA,MAlBDC,iBAkBC,QAlBDA,iBAkBC;AAAA,MAhBDC,WAgBC,QAhBDA,WAgBC;AAAA,MAfDC,eAeC,QAfDA,eAeC;AAAA,MAdDC,2BAcC,QAdDA,2BAcC;AAAA,MAZDC,kBAYC,QAZDA,kBAYC;AAAA,MAXDC,oBAWC,QAXDA,oBAWC;AAAA,MAVDC,oBAUC,QAVDA,oBAUC;AAAA,MATDC,aASC,QATDA,aASC;AAAA,MARDC,oBAQC,QARDA,oBAQC;AAAA,MAPDC,uBAOC,QAPDA,uBAOC;AAAA,MALDC,QAKC,QALDA,QAKC;AAAA,MAJDC,YAIC,QAJDA,YAIC;AAAA,MAHDC,wBAGC,QAHDA,wBAGC;AAEH7B,EAAAA,mBAAmB,CAACQ,GAAD,EAAM;AAAA,WAAO;AAC9BsB,MAAAA,KAAK,EAAE,iBAAM;AACXA,QAAAA,MAAK;AACN,OAH6B;AAI9BC,MAAAA,YAAY,EAAE,wBAAM;AAClBA,QAAAA,aAAY;AACb,OAN6B;AAO9BC,MAAAA,aAAa,EAAE,yBAAM;AACnBA,QAAAA,cAAa;AACd;AAT6B,KAAP;AAAA,GAAN,CAAnB;;AAaA,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,QAAIT,aAAa,IAAIA,aAAa,CAACnB,MAAnC,EAA2C;AACzC,aAAOmB,aAAa,CAACnB,MAArB;AACD,KAFD,MAEO;AACL,UAAI,CAACI,IAAD,IAASA,IAAI,CAACyB,MAAL,IAAe,CAA5B,EAA+B;AAC7B,eAAO,GAAP;AACD,OAFD,MAEO;AACL,YAAIP,QAAQ,IAAIA,QAAQ,CAACtB,MAAzB,EAAiC;AAC/B,cAAMA,OAAM,GAAGsB,QAAQ,CAACtB,MAAT,GAAkBI,IAAI,CAACyB,MAAtC;;AACA,iBAAO7B,OAAM,GAAGC,mBAAT,GAA+BD,OAA/B,GAAwCC,mBAA/C;AACD,SAHD,MAGO;AACL,cAAMD,QAAM,GAAG,KAAKI,IAAI,CAACyB,MAAzB;;AACA,iBAAO7B,QAAM,GAAGC,mBAAT,GAA+BD,QAA/B,GAAwCC,mBAA/C;AACD;AACF;AACF;AACF,GAhBD;;AAkBA,MAAM6B,cAAc,GAAGrC,MAAM,EAA7B;;AACA,kBAAkCD,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOuC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAoCxC,QAAQ,CAAC,CAAD,CAA5C;AAAA;AAAA,MAAOyC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAoC1C,QAAQ,CAAC,CAAD,CAA5C;AAAA;AAAA,MAAO2C,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA4C5C,QAAQ,CAAC,YAAM;AACzD,WAAOoC,uBAAuB,EAA9B;AACD,GAFmD,CAApD;AAAA;AAAA,MAAOS,cAAP;AAAA,MAAuBC,iBAAvB;;AAGA,mBAA0C9C,QAAQ,CAAC,CAAD,CAAlD;AAAA;AAAA,MAAO+C,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,oBAAwChD,QAAQ,CAAC,IAAD,CAAhD;AAAA;AAAA,MAAOiD,YAAP;AAAA,MAAqBC,eAArB;;AACA,oBAA0BlD,QAAQ,CAAC,CAAC,CAAF,CAAlC;AAAA;AAAA,MAAOmD,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,mBAAmB,GAAGpD,MAAM,CAAC,IAAD,CAAlC;AAGA,MAAMqD,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,IAAAA,cAAc,EAAE;AACdC,MAAAA,aAAa,EAAEjC,oBAAoB,IAAI,MAAxB,GAAiC,KAAjC,GAAyC,aAD1C;AAEdkC,MAAAA,cAAc,EAAE,eAFF;AAGdC,MAAAA,UAAU,EAAE,QAHE;AAIdC,MAAAA,eAAe,EAAE,SAJH;AAKdtD,MAAAA,KAAK,EAAEA,KAAK,GAAG,CALD;AAMdC,MAAAA,MAAM,EAAE,EANM;AAOdsD,MAAAA,iBAAiB,EAAE,CAPL;AAQdC,MAAAA,QAAQ,EAAE;AARI,KADe;AAW/BC,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,IAAI,EAAE,CADY;AAElBC,MAAAA,QAAQ,EAAE,EAFQ;AAGlBC,MAAAA,KAAK,EAAE,SAHW;AAIlBC,MAAAA,SAAS,EAAE,QAJO;AAKlBC,MAAAA,gBAAgB,EAAE;AALA,KAXW;AAkB/BC,IAAAA,8BAA8B,EAAE;AAC9BL,MAAAA,IAAI,EAAE,CADwB;AAG9BF,MAAAA,QAAQ,EAAE;AAHoB,KAlBD;AAwB/BQ,IAAAA,eAAe,EAAE;AACfhE,MAAAA,KAAK,EAAE,MADQ;AAEfC,MAAAA,MAAM,EAAE,MAFO;AAGfqD,MAAAA,eAAe,EAAE;AAHF,KAxBc;AA6B/BW,IAAAA,mBAAmB,EAAE;AACnBX,MAAAA,eAAe,EAAE;AADE,KA7BU;AAgC/BY,IAAAA,wBAAwB,EAAE;AACxBC,MAAAA,QAAQ,EAAE,UADc;AAExBC,MAAAA,GAAG,EAAEhC,UAFmB;AAGxBnC,MAAAA,MAAM,EAAEqC,cAHgB;AAIxBtC,MAAAA,KAAK,EAAEwC,aAJiB;AAKxB6B,MAAAA,cAAc,EAAE,CALQ;AAMxBb,MAAAA,QAAQ,EAAE;AANc,KAhCK;AAwC/Bc,IAAAA,2BAA2B,EAAEC,WAAW,CAACC,KAAZ,GACzB;AAAEC,MAAAA,KAAK,EAAEvC;AAAT,KADyB,GAEzB;AAAEwC,MAAAA,IAAI,EAAExC;AAAR,KA1C2B;AA2C/ByC,IAAAA,6BAA6B,EAAE;AAC7B3E,MAAAA,KAAK,EAAE,MADsB;AAE7BC,MAAAA,MAAM,EAAE,MAFqB;AAG7BmD,MAAAA,cAAc,EAAE,QAHa;AAI7BC,MAAAA,UAAU,EAAE;AAJiB,KA3CA;AAkD/BuB,IAAAA,WAAW,EAAE;AACXlB,MAAAA,IAAI,EAAE,CADK;AAEXzD,MAAAA,MAAM,EAAE,EAFG;AAGXkD,MAAAA,aAAa,EAAE,KAHJ;AAIXC,MAAAA,cAAc,EAAE,QAJL;AAKXC,MAAAA,UAAU,EAAE,QALD;AAMXwB,MAAAA,iBAAiB,EAAE,SANR;AAOXC,MAAAA,iBAAiB,EAAE;AAPR,KAlDkB;AA2D/BC,IAAAA,eAAe,EAAE;AACfrB,MAAAA,IAAI,EAAE,CADS;AAEfC,MAAAA,QAAQ,EAAE,EAFK;AAGfC,MAAAA,KAAK,EAAE,SAHQ;AAIfC,MAAAA,SAAS,EAAE,QAJI;AAKfC,MAAAA,gBAAgB,EAAE;AALH,KA3Dc;AAkE/BkB,IAAAA,2BAA2B,EAAE;AAC3BtB,MAAAA,IAAI,EAAE,CADqB;AAG3BF,MAAAA,QAAQ,EAAE;AAHiB,KAlEE;AAwE/ByB,IAAAA,MAAM,EAAE;AACNC,MAAAA,WAAW,EAAE,MADP;AAENC,MAAAA,YAAY,EAAE;AAAEnF,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAFR;AAGNmF,MAAAA,aAAa,EAAE,GAHT;AAINC,MAAAA,YAAY,EAAE,EAJR;AAKNC,MAAAA,SAAS,EAAE;AALL;AAxEuB,GAAlB,CAAf;AAkFA9F,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAIa,IAAI,CAACyB,MAAL,IAAe,CAAnB,EAAsB;AACpBJ,MAAAA,MAAK;;AACL,UAAIf,mBAAmB,IAAIN,IAAvB,IAA+BA,IAAI,CAACM,mBAAD,CAAvC,EAA8D;AAC5D4E,QAAAA,UAAU,CAAC5E,mBAAD,CAAV;AACD;;AACD,UAAID,YAAY,IAAIL,IAAhB,IAAwBmF,cAAc,CAAC9E,YAAD,EAAeL,IAAf,CAAd,IAAsC,CAAlE,EAAqE;AACnEkF,QAAAA,UAAU,CAACC,cAAc,CAAC9E,YAAD,EAAeL,IAAf,CAAf,CAAV;AACD;AACF;AACF,GAXQ,EAWN,CAACA,IAAD,CAXM,CAAT;AAYAb,EAAAA,SAAS,CAAC,YAAM;AAEd,QACEmB,mBAAmB,IAAI,IAAvB,IACAA,mBAAmB,IAAI8E,SADvB,IAEApF,IAFA,IAGAA,IAAI,CAACM,mBAAD,CAJN,EAKE;AACA4E,MAAAA,UAAU,CAAC5E,mBAAD,CAAV;AACD;AACF,GAVQ,EAUN,CAACA,mBAAD,CAVM,CAAT;AAWAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkB,YAAY,IAAIL,IAApB,EAA0B;AACxB,UAAImF,cAAc,CAAC9E,YAAD,EAAeL,IAAf,CAAd,IAAsC,CAA1C,EAA6C;AAC3CkF,QAAAA,UAAU,CAACC,cAAc,CAAC9E,YAAD,EAAeL,IAAf,CAAf,CAAV;AACD;AACF;AACF,GANQ,EAMN,CAACK,YAAD,CANM,CAAT;AAOAlB,EAAAA,SAAS,CAAC,YAAM;AAEd+C,IAAAA,iBAAiB,CAACV,uBAAuB,EAAxB,CAAjB;AACD,GAHQ,EAGN,CAACT,aAAD,EAAgBf,IAAhB,CAHM,CAAT;;AAMA,MAAMsB,aAAY,GAAG,SAAfA,aAAe,GAAM;AACzBI,IAAAA,cAAc,CAAC2D,OAAf,CAAuBC,OAAvB,CAA+B,UAACC,EAAD,EAAKC,EAAL,EAASC,CAAT,EAAYC,CAAZ,EAAeC,EAAf,EAAmBC,EAAnB,EAA0B;AAEvD,UAAIhG,MAAM,GAAG,EAAT,GAAcgG,EAAE,GAAGF,CAAL,GAASzD,cAA3B,EAA2C;AACzCH,QAAAA,aAAa,CAAC6D,EAAD,CAAb;AACA3D,QAAAA,aAAa,CAAC4D,EAAE,GAAG,CAAL,GAAS3D,cAAV,CAAb;AACD,OAHD,MAGO;AACLH,QAAAA,aAAa,CAAC6D,EAAD,CAAb;AACA3D,QAAAA,aAAa,CAAC4D,EAAE,GAAGF,CAAL,GAAS,CAAV,CAAb;AACD;;AACDtD,MAAAA,gBAAgB,CAAC,CAAArB,aAAa,QAAb,YAAAA,aAAa,CAAEpB,KAAf,KAAwB8F,CAAzB,CAAhB;AACA7D,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAXD;AAYD,GAbD;;AAcA,MAAML,cAAa,GAAG,SAAhBA,cAAgB,GAAM;AAC1BK,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAGA,MAAMP,MAAK,GAAG,SAARA,MAAQ,GAAM;AAClBiB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,QAAQ,CAAC,CAAC,CAAF,CAAR;AACD,GAHD;;AAIA,MAAM0C,UAAU,GAAG,SAAbA,UAAa,CAAC3C,KAAD,EAAW;AAC5BD,IAAAA,eAAe,CAACtC,IAAI,CAACuC,KAAD,CAAL,CAAf;AACAC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAHD;;AAIA,MAAM4C,cAAc,GAAG,SAAjBA,cAAiB,CAACU,GAAD,EAAMC,GAAN,EAAc;AACnC,QAAI,OAAOD,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAIE,iBAAiB,GAAG,CAAC,CAAzB;;AACA,WAAK,IAAIxD,MAAK,GAAG,CAAjB,EAAoBA,MAAK,GAAGuD,GAAG,CAACrE,MAAhC,EAAwCc,MAAK,EAA7C,EAAiD;AAC/C,YAAMyD,OAAO,GAAGF,GAAG,CAACvD,MAAD,CAAnB;;AACA,YAAI/C,CAAC,CAACyG,OAAF,CAAUD,OAAV,EAAmB3F,YAAnB,CAAJ,EAAsC;AACpC0F,UAAAA,iBAAiB,GAAGxD,MAApB;AACD;;AACD,YAAIA,MAAK,IAAIuD,GAAG,CAACrE,MAAJ,GAAa,CAA1B,EAA6B;AAC3B,cAAIsE,iBAAiB,IAAI,CAAzB,EAA4B;AAC1Bb,YAAAA,UAAU,CAACa,iBAAD,CAAV;AACD;AACF;AACF;AACF,KAbD,MAaO;AACL,UAAIA,iBAAiB,GAAG,CAAC,CAAzB;;AACA,WAAK,IAAIxD,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAGuD,GAAG,CAACrE,MAAhC,EAAwCc,OAAK,EAA7C,EAAiD;AAC/C,YAAMyD,QAAO,GAAGF,GAAG,CAACvD,OAAD,CAAnB;;AACA,YAAIyD,QAAO,IAAI3F,YAAf,EAA6B;AAC3B0F,UAAAA,iBAAiB,GAAGxD,OAApB;AACD;;AACD,YAAIA,OAAK,IAAIuD,GAAG,CAACrE,MAAJ,GAAa,CAA1B,EAA6B;AAC3B,cAAIsE,iBAAiB,IAAI,CAAzB,EAA4B;AAC1Bb,YAAAA,UAAU,CAACa,iBAAD,CAAV;AACD;AACF;AACF;AACF;AACF,GA5BD;;AA6BA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAClG,IAAD,EAAOuC,KAAP;AAAA,WAAkB;AACtCA,MAAAA,KAAK,EAALA,KADsC;AAEtCd,MAAAA,MAAM,EAAEzB,IAAI,CAACyB,MAFyB;AAGtC0E,MAAAA,MAAM,EAAEjF,QAAQ,IAAIA,QAAQ,CAACtB,MAArB,GAA8BsB,QAAQ,CAACtB,MAAT,GAAkB2C,KAAhD,GAAwD,KAAKA;AAH/B,KAAlB;AAAA,GAAtB;;AAKA,MAAM6D,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAI5F,iBAAJ,EAAuB;AACrB;AACD;;AACD,QAAI+B,KAAK,IAAI,CAAT,IAAcE,mBAAlB,EAAuC;AACrCA,MAAAA,mBAAmB,CAAC4C,OAApB,CAA4BgB,cAA5B,CAA2C;AACzCF,QAAAA,MAAM,EACJjF,QAAQ,IAAIA,QAAQ,CAACtB,MAArB,GAA8BsB,QAAQ,CAACtB,MAAT,GAAkB2C,KAAhD,GAAwD,KAAKA,KAFtB;AAGzC+D,QAAAA,QAAQ,EAAE;AAH+B,OAA3C;AAKD;AACF,GAXD;;AAcA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,QAAqB;AAAA,QAAlBC,IAAkB,SAAlBA,IAAkB;AAAA,QAAZjE,KAAY,SAAZA,KAAY;AAC9C,WACE,KAAC,gBAAD;AACE,MAAA,KAAK,EAAE,CAACG,MAAM,CAAC6B,WAAR,EAAqBrD,QAArB,CADT;AAEE,MAAA,OAAO,EAAE,mBAAM;AACbK,QAAAA,cAAa;;AACbtB,QAAAA,QAAQ,CAACuG,IAAD,EAAOjE,KAAP,CAAR;AACAD,QAAAA,eAAe,CAACkE,IAAD,CAAf;AACAhE,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OAPH;AAAA,gBASGnB,wBAAwB,GACvB,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACsB,MAAM,CAACiC,2BAAR,CAAb;AAAA,kBACGvD,wBAAwB,CACvBhB,mBAAmB,GAAGA,mBAAmB,CAACoG,IAAD,EAAOjE,KAAP,CAAtB,GAAsCiE,IADlC,EAEvBjE,KAFuB;AAD3B,QADuB,GAQvB,KAAC,IAAD;AACE,QAAA,aAAa,EAAE,CADjB;AAEE,QAAA,gBAAgB,EAAE,KAFpB;AAGE,QAAA,KAAK,EAAE,CAACG,MAAM,CAACgC,eAAR,EAAyBvD,YAAzB,CAHT;AAAA,kBAKGf,mBAAmB,GAAGA,mBAAmB,CAACoG,IAAD,EAAOjE,KAAP,CAAtB,GAAsCiE;AAL5D;AAjBJ,MADF;AA4BD,GA7BD;;AA8BA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,WACE9E,SAAS,IACP,MAAC,KAAD;AACE,MAAA,qBAAqB,EAAE,CAAC,UAAD,EAAa,WAAb,CADzB;AAEE,MAAA,aAAa,EAAC,MAFhB;AAGE,MAAA,WAAW,EAAE,IAHf;AAIE,MAAA,oBAAoB,EAClBb,oBAAoB,GAAGA,oBAAH,GAA0B,KALlD;AAOE,MAAA,OAAO,EAAEa,SAPX;AAAA,iBAUE,KAAC,gBAAD;AACE,QAAA,aAAa,EAAE,CADjB;AAEE,QAAA,KAAK,EAAE,CACLe,MAAM,CAACiB,eADF,EAEL,CAAC,CAAC3C,oBAAF,IAA0B;AACxBiC,UAAAA,eAAe,EAAEjC;AADO,SAFrB,CAFT;AAQE,QAAA,OAAO,EAAE;AAAA,iBAAMO,cAAa,EAAnB;AAAA;AARX,QAVF,EAoBE,KAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACLmB,MAAM,CAACkB,mBADF,EAELlB,MAAM,CAACkC,MAFF,EAGL7D,aAHK,EAIL2B,MAAM,CAACmB,wBAJF,EAKLnB,MAAM,CAACuB,2BALF,CADT;AAAA,kBASG,CAACjE,IAAD,IAASA,IAAI,CAACyB,MAAL,IAAe,CAAxB,GACC,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAACiB,MAAM,CAAC4B,6BAAR,CAAb;AAAA,oBACE,KAAC,iBAAD;AAAmB,YAAA,IAAI,EAAC,OAAxB;AAAgC,YAAA,KAAK,EAAE;AAAvC;AADF,UADD,GAKC,KAAC,QAAD;AACE,UAAA,IAAI,EAAEtE,IADR;AAEE,UAAA,KAAK,EAAE,CACL,CAAC,CAACiB,uBAAF,IAA6B;AAC3BgC,YAAAA,eAAe,EAAEhC;AADU,WADxB,CAFT;AAOE,UAAA,YAAY,EAAE,sBAACuF,IAAD,EAAOjE,KAAP;AAAA,mBAAiBA,KAAK,CAACmE,QAAN,EAAjB;AAAA,WAPhB;AAQE,UAAA,GAAG,EAAE,aAAC3G,KAAD;AAAA,mBAAU0C,mBAAmB,CAAC4C,OAApB,GAA8BtF,KAAxC;AAAA,WARP;AASE,UAAA,UAAU,EAAEwG,kBATd;AAUE,UAAA,aAAa,EAAEL,aAVjB;AAWE,UAAA,QAAQ,EAAEE;AAXZ;AAdJ,QApBF;AAAA,MAFJ;AAsDD,GAvDD;;AAyDA,SACE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE7F,QADZ;AAEE,IAAA,GAAG,EAAEmB,cAFP;AAGE,IAAA,aAAa,EAAE,GAHjB;AAIE,IAAA,KAAK,EAAE,CAACgB,MAAM,CAACG,cAAR,EAAwBpC,WAAxB,CAJT;AAKE,IAAA,OAAO,EAAE;AAAA,aAAMa,aAAY,EAAlB;AAAA,KALX;AAAA,eAOGmF,cAAc,EAPjB,EAQG7F,kBAAkB,IAAIA,kBAAkB,CAACe,SAAD,CAR3C,EASGhB,2BAA2B,GAC1B,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAAC+B,MAAM,CAACgB,8BAAR,CAAb;AAAA,gBACG/C,2BAA2B,CAAC0B,YAAD,EAAeE,KAAf;AAD9B,MAD0B,GAK1B,KAAC,IAAD;AACE,MAAA,aAAa,EAAE,CADjB;AAEE,MAAA,gBAAgB,EAAE,KAFpB;AAGE,MAAA,KAAK,EAAE,CAACG,MAAM,CAACU,kBAAR,EAA4B1C,eAA5B,CAHT;AAAA,gBAKG2B,YAAY,GACTlC,wBAAwB,GACtBA,wBAAwB,CAACkC,YAAD,EAAeE,KAAf,CADF,GAEtBF,YAHO,GAITnC,iBAAiB,GACjBA,iBADiB,GAEjB;AAXN,MAdJ;AAAA,IADF;AA+BD,CAhYD;;AAkYA,eAAeZ,UAAU,CAAC,UAACqH,KAAD,EAAQ5G,GAAR;AAAA,SAAgBD,cAAc,CAAC6G,KAAD,EAAQ5G,GAAR,CAA9B;AAAA,CAAD,CAAzB","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  FlatList,\n  Dimensions,\n  ActivityIndicator,\n  Modal,\n  I18nManager,\n} from \"react-native\";\nimport _ from \"lodash\";\nconst { width, height } = Dimensions.get(\"window\");\n\nconst DROPDOWN_MAX_HEIGHT = height * 0.4;\n\nconst SelectDropdown = (\n  {\n    data /* array */,\n    onSelect /* function  */,\n    defaultButtonText /* String */,\n    buttonTextAfterSelection /* function */,\n    rowTextForSelection /* function */,\n    defaultValue /* any */,\n    defaultValueByIndex /* integer */,\n    disabled /* boolean */,\n    disableAutoScroll /* boolean */,\n    /////////////////////////////\n    buttonStyle /* style object for button */,\n    buttonTextStyle /* style object for button text */,\n    renderCustomizedButtonChild /* function returns React component for customized button */,\n    /////////////////////////////\n    renderDropdownIcon,\n    dropdownIconPosition,\n    statusBarTranslucent,\n    dropdownStyle,\n    dropdownOverlayColor /* string */,\n    dropdownBackgroundColor /* string */,\n    /////////////////////////////\n    rowStyle /* style object for row */,\n    rowTextStyle /* style object for row text */,\n    renderCustomizedRowChild /* function returns React component for customized row */,\n  },\n  ref\n) => {\n  ///////////////////////////////////////////////////////\n  useImperativeHandle(ref, () => ({\n    reset: () => {\n      reset();\n    },\n    openDropdown: () => {\n      openDropdown();\n    },\n    closeDropdown: () => {\n      closeDropdown();\n    },\n  }));\n  ///////////////////////////////////////////////////////\n  // Dropdown height calculation\n  const calculateDropdownHeight = () => {\n    if (dropdownStyle && dropdownStyle.height) {\n      return dropdownStyle.height;\n    } else {\n      if (!data || data.length == 0) {\n        return 150;\n      } else {\n        if (rowStyle && rowStyle.height) {\n          const height = rowStyle.height * data.length;\n          return height < DROPDOWN_MAX_HEIGHT ? height : DROPDOWN_MAX_HEIGHT;\n        } else {\n          const height = 50 * data.length;\n          return height < DROPDOWN_MAX_HEIGHT ? height : DROPDOWN_MAX_HEIGHT;\n        }\n      }\n    }\n  };\n  ///////////////////////////////////////////////////////\n  const DropdownButton = useRef(); // button ref to get positions\n  const [isVisible, setIsVisible] = useState(false); // dropdown visible ?\n  const [dropdownPX, setDropdownPX] = useState(0); // position x\n  const [dropdownPY, setDropdownPY] = useState(0); // position y\n  const [dropdownHEIGHT, setDropdownHEIGHT] = useState(() => {\n    return calculateDropdownHeight();\n  }); // dropdown height\n  const [dropdownWIDTH, setDropdownWIDTH] = useState(0); // dropdown width\n  ///////////////////////////////////////////////////////\n  const [selectedItem, setSelectedItem] = useState(null); // selected item from dropdown\n  const [index, setIndex] = useState(-1); // index of selected item from dropdown\n  const dropDownFlatlistRef = useRef(null); // ref to the drop down flatlist\n  ///////////////////////////////////////////////////////\n  /* ********************* Style ********************* */\n  const styles = StyleSheet.create({\n    dropdownButton: {\n      flexDirection: dropdownIconPosition == \"left\" ? \"row\" : \"row-reverse\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      backgroundColor: \"#EFEFEF\",\n      width: width / 2,\n      height: 50,\n      paddingHorizontal: 8,\n      overflow: \"hidden\",\n    },\n    dropdownButtonText: {\n      flex: 1,\n      fontSize: 18,\n      color: \"#000000\",\n      textAlign: \"center\",\n      marginHorizontal: 8,\n    },\n    dropdownCustomizedButtonParent: {\n      flex: 1,\n      // marginHorizontal: 8,\n      overflow: \"hidden\",\n    },\n    //////////////////////////////////////\n    dropdownOverlay: {\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"rgba(0,0,0,0.4)\",\n    },\n    dropdownOverlayView: {\n      backgroundColor: \"#EFEFEF\",\n    },\n    dropdownOverlayViewForce: {\n      position: \"absolute\",\n      top: dropdownPY,\n      height: dropdownHEIGHT,\n      width: dropdownWIDTH,\n      borderTopWidth: 0,\n      overflow: \"hidden\",\n    },\n    dropdownOverlayViewForceRTL: I18nManager.isRTL\n      ? { right: dropdownPX }\n      : { left: dropdownPX },\n    dropdownActivityIndicatorView: {\n      width: \"100%\",\n      height: \"100%\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    //////////////////////////////////////\n    dropdownRow: {\n      flex: 1,\n      height: 50,\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      borderBottomColor: \"#C5C5C5\",\n      borderBottomWidth: 1,\n    },\n    dropdownRowText: {\n      flex: 1,\n      fontSize: 18,\n      color: \"#000000\",\n      textAlign: \"center\",\n      marginHorizontal: 8,\n    },\n    dropdownCustomizedRowParent: {\n      flex: 1,\n      // marginHorizontal: 8,\n      overflow: \"hidden\",\n    },\n    //////////////////////////////////////\n    shadow: {\n      shadowColor: \"#000\",\n      shadowOffset: { width: 0, height: 6 },\n      shadowOpacity: 0.1,\n      shadowRadius: 10,\n      elevation: 10,\n    },\n  });\n  ///////////////////////////////////////////////////////\n  /* ******************* useEffect ******************* */\n  useEffect(() => {\n    // data array changes\n    if (data.length == 0) {\n      reset();\n      if (defaultValueByIndex && data && data[defaultValueByIndex]) {\n        setDefault(defaultValueByIndex);\n      }\n      if (defaultValue && data && findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [data]);\n  useEffect(() => {\n    // default value by index added or changed\n    if (\n      defaultValueByIndex != null &&\n      defaultValueByIndex != undefined &&\n      data &&\n      data[defaultValueByIndex]\n    ) {\n      setDefault(defaultValueByIndex);\n    }\n  }, [defaultValueByIndex]);\n  useEffect(() => {\n    if (defaultValue && data) {\n      if (findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [defaultValue]);\n  useEffect(() => {\n    // for height changes\n    setDropdownHEIGHT(calculateDropdownHeight());\n  }, [dropdownStyle, data]);\n  ///////////////////////////////////////////////////////\n  /* ******************** Methods ******************** */\n  const openDropdown = () => {\n    DropdownButton.current.measure((fx, fy, w, h, px, py) => {\n      // console.log('position y => ', py, '\\nheight', h, '\\nposition x => ', px)\n      if (height - 18 < py + h + dropdownHEIGHT) {\n        setDropdownPX(px);\n        setDropdownPY(py - 2 - dropdownHEIGHT);\n      } else {\n        setDropdownPX(px);\n        setDropdownPY(py + h + 2);\n      }\n      setDropdownWIDTH(dropdownStyle?.width || w);\n      setIsVisible(true);\n    });\n  };\n  const closeDropdown = () => {\n    setIsVisible(false);\n  };\n  const reset = () => {\n    setSelectedItem(null);\n    setIndex(-1);\n  };\n  const setDefault = (index) => {\n    setSelectedItem(data[index]);\n    setIndex(index);\n  };\n  const findIndexInArr = (obj, arr) => {\n    if (typeof obj == \"object\") {\n      var defaultValueIndex = -1;\n      for (let index = 0; index < arr.length; index++) {\n        const element = arr[index];\n        if (_.isEqual(element, defaultValue)) {\n          defaultValueIndex = index;\n        }\n        if (index == arr.length - 1) {\n          if (defaultValueIndex >= 0) {\n            setDefault(defaultValueIndex);\n          }\n        }\n      }\n    } else {\n      var defaultValueIndex = -1;\n      for (let index = 0; index < arr.length; index++) {\n        const element = arr[index];\n        if (element == defaultValue) {\n          defaultValueIndex = index;\n        }\n        if (index == arr.length - 1) {\n          if (defaultValueIndex >= 0) {\n            setDefault(defaultValueIndex);\n          }\n        }\n      }\n    }\n  };\n  const getItemLayout = (data, index) => ({\n    index,\n    length: data.length,\n    offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n  });\n  const onLayout = () => {\n    if (disableAutoScroll) {\n      return;\n    }\n    if (index >= 3 && dropDownFlatlistRef) {\n      dropDownFlatlistRef.current.scrollToOffset({\n        offset:\n          rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n        animated: true,\n      });\n    }\n  };\n  ///////////////////////////////////////////////////////\n  /* ******************** Render Methods ******************** */\n  const renderFlatlistItem = ({ item, index }) => {\n    return (\n      <TouchableOpacity\n        style={[styles.dropdownRow, rowStyle]}\n        onPress={() => {\n          closeDropdown();\n          onSelect(item, index);\n          setSelectedItem(item);\n          setIndex(index);\n        }}\n      >\n        {renderCustomizedRowChild ? (\n          <View style={[styles.dropdownCustomizedRowParent]}>\n            {renderCustomizedRowChild(\n              rowTextForSelection ? rowTextForSelection(item, index) : item,\n              index\n            )}\n          </View>\n        ) : (\n          <Text\n            numberOfLines={1}\n            allowFontScaling={false}\n            style={[styles.dropdownRowText, rowTextStyle]}\n          >\n            {rowTextForSelection ? rowTextForSelection(item, index) : item}\n          </Text>\n        )}\n      </TouchableOpacity>\n    );\n  };\n  const renderDropdown = () => {\n    return (\n      isVisible && (\n        <Modal\n          supportedOrientations={[\"portrait\", \"landscape\"]}\n          animationType=\"none\"\n          transparent={true}\n          statusBarTranslucent={\n            statusBarTranslucent ? statusBarTranslucent : false\n          }\n          visible={isVisible}\n          // style={[styles.dropdownOverlay]}\n        >\n          <TouchableOpacity\n            activeOpacity={1}\n            style={[\n              styles.dropdownOverlay,\n              !!dropdownOverlayColor && {\n                backgroundColor: dropdownOverlayColor,\n              },\n            ]}\n            onPress={() => closeDropdown()}\n          />\n          <View\n            style={[\n              styles.dropdownOverlayView,\n              styles.shadow,\n              dropdownStyle,\n              styles.dropdownOverlayViewForce,\n              styles.dropdownOverlayViewForceRTL,\n            ]}\n          >\n            {!data || data.length == 0 ? (\n              <View style={[styles.dropdownActivityIndicatorView]}>\n                <ActivityIndicator size=\"small\" color={\"#999999\"} />\n              </View>\n            ) : (\n              <FlatList\n                data={data}\n                style={[\n                  !!dropdownBackgroundColor && {\n                    backgroundColor: dropdownBackgroundColor,\n                  },\n                ]}\n                keyExtractor={(item, index) => index.toString()}\n                ref={(ref) => (dropDownFlatlistRef.current = ref)}\n                renderItem={renderFlatlistItem}\n                getItemLayout={getItemLayout}\n                onLayout={onLayout}\n              />\n            )}\n          </View>\n        </Modal>\n      )\n    );\n  };\n  ///////////////////////////////////////////////////////\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      ref={DropdownButton}\n      activeOpacity={0.5}\n      style={[styles.dropdownButton, buttonStyle]}\n      onPress={() => openDropdown()}\n    >\n      {renderDropdown()}\n      {renderDropdownIcon && renderDropdownIcon(isVisible)}\n      {renderCustomizedButtonChild ? (\n        <View style={[styles.dropdownCustomizedButtonParent]}>\n          {renderCustomizedButtonChild(selectedItem, index)}\n        </View>\n      ) : (\n        <Text\n          numberOfLines={1}\n          allowFontScaling={false}\n          style={[styles.dropdownButtonText, buttonTextStyle]}\n        >\n          {selectedItem\n            ? buttonTextAfterSelection\n              ? buttonTextAfterSelection(selectedItem, index)\n              : selectedItem\n            : defaultButtonText\n            ? defaultButtonText\n            : \"Select an option.\"}\n        </Text>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nexport default forwardRef((props, ref) => SelectDropdown(props, ref));\n"]},"metadata":{},"sourceType":"module"}