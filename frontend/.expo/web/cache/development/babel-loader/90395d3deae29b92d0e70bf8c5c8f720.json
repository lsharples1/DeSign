{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SelectDropdown from 'react-native-select-dropdown';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n  var platformOptions = ['Pharmacy', 'Judiciary', 'Banking'];\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(SignInScreen, {})\n  });\n}\n\nfunction SignInScreen() {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      username = _React$useState2[0],\n      setUsername = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      signIn = _React$useContext.signIn;\n\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"   Username\",\n      value: username,\n      onChangeText: setUsername\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"   Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true\n    }), _jsx(ChoosePlatform, {}), _jsx(Button, {\n      title: \"Sign in\",\n      onPress: function onPress() {\n        return signIn({\n          username: username,\n          password: password\n        });\n      }\n    })]\n  });\n}\n\nvar ChoosePlatform = function ChoosePlatform() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      platformValue = _useState2[0],\n      setPlatformValue = _useState2[1];\n\n  var handleSelect = function handleSelect(e) {\n    console.log(e);\n    setPlatformValue(e);\n  };\n\n  return _jsx(SelectDropdown, {\n    data: platformOptions,\n    onSelect: handleSelect,\n    defaultButtonText: \"Select Platform\",\n    buttonTextAfterSelection: function buttonTextAfterSelection(selectedItem, index) {\n      return selectedItem;\n    },\n    rowTextForSelection: function rowTextForSelection(item, index) {\n      return item;\n    },\n    buttonStyle: styles.dropdownBtnStyle,\n    buttonTextStyle: styles.dropdownBtnTxtStyle,\n    renderDropdownIcon: function renderDropdownIcon(isOpened) {\n      return _jsx(FontAwesome, {\n        name: isOpened ? \"chevron-up\" : \"chevron-down\",\n        color: \"#444\",\n        size: 18\n      });\n    },\n    dropdownIconPosition: \"right\",\n    dropdownStyle: styles.dropdownStyle,\n    rowStyle: styles.dropdownRowStyle,\n    rowTextStyle: styles.dropdownRowTxtStyle\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/lillysharples/11Dev/projects/hackathon/frontend/src/screens/landing/index.js"],"names":["StatusBar","React","useState","NavigationContainer","createStackNavigator","SelectDropdown","FontAwesome","App","navigation","platformOptions","styles","container","SignInScreen","username","setUsername","password","setPassword","useContext","AuthContext","signIn","input","ChoosePlatform","platformValue","setPlatformValue","handleSelect","e","console","log","selectedItem","index","item","dropdownBtnStyle","dropdownBtnTxtStyle","isOpened","dropdownStyle","dropdownRowStyle","dropdownRowTxtStyle","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { Button, Text, TextInput, View, StyleSheet, Pressable, Alert } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SelectDropdown from 'react-native-select-dropdown';\nimport FontAwesome from \"react-native-vector-icons/FontAwesome\";\nexport default function App( { navigation }) {\n  const platformOptions = ['Pharmacy', 'Judiciary', 'Banking'];\n\n  return (\n    <View style={styles.container}>\n      <SignInScreen/>\n    </View>\n  );\n}\n\nfunction SignInScreen() {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const { signIn } = React.useContext(AuthContext);\n\n  return (\n    <View>\n      <TextInput\n      style={styles.input}\n        placeholder=\"   Username\"\n        value={username}\n        onChangeText={setUsername}\n      />\n      <TextInput\n      style={styles.input}\n        placeholder=\"   Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <ChoosePlatform/>\n      <Button title=\"Sign in\" onPress={() => signIn({ username, password })} />\n    </View>\n  );\n}\n\nconst ChoosePlatform = () => {\n  const [platformValue, setPlatformValue]=useState('');\n   const handleSelect=(e)=>{\n    console.log(e);\n    setPlatformValue(e)\n  }\n  return (\n        <SelectDropdown\n            data={platformOptions}\n            onSelect={handleSelect}\n            defaultButtonText={\"Select Platform\"}\n            buttonTextAfterSelection={(selectedItem, index) => {\n              return selectedItem;\n            }}\n            rowTextForSelection={(item, index) => {\n              return item;\n            }}\n            buttonStyle={styles.dropdownBtnStyle}\n            buttonTextStyle={styles.dropdownBtnTxtStyle}\n            renderDropdownIcon={(isOpened) => {\n              return (\n                <FontAwesome\n                  name={isOpened ? \"chevron-up\" : \"chevron-down\"}\n                  color={\"#444\"}\n                  size={18}\n                />\n              );\n            }}\n            dropdownIconPosition={\"right\"}\n            dropdownStyle={styles.dropdownStyle}\n            rowStyle={styles.dropdownRowStyle}\n            rowTextStyle={styles.dropdownRowTxtStyle}\n          />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}